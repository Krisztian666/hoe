/**
 * Heroes of Empires - empire
 * OE Microservice Project
 *
 * OpenAPI spec version: v1
 * Contact: krisztian@mozilla.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Empire } from '../model/empire';
import { SecurityGuard } from '../model/securityGuard';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EmpireHandlerResourceService {

    protected basePath = 'http://localhost:8092/empire';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Új birodalom felvitele.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEmpire(body?: Empire, observe?: 'body', reportProgress?: boolean): Observable<Array<Empire>>;
    public addEmpire(body?: Empire, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Empire>>>;
    public addEmpire(body?: Empire, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Empire>>>;
    public addEmpire(body?: Empire, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<Empire>>('post',`${this.basePath}/empirehandler`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Egy Birodalom megtámadása
     * @param empireid 
     * @param heroid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public attack(empireid: number, heroid: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public attack(empireid: number, heroid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public attack(empireid: number, heroid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public attack(empireid: number, heroid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (empireid === null || empireid === undefined) {
            throw new Error('Required parameter empireid was null or undefined when calling attack.');
        }

        if (heroid === null || heroid === undefined) {
            throw new Error('Required parameter heroid was null or undefined when calling attack.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/empirehandler/attack/${encodeURIComponent(String(empireid))}/${encodeURIComponent(String(heroid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Egy Birodalom lekérdezése.
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEmpireById(id: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteEmpireById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteEmpireById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteEmpireById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteEmpireById.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('delete',`${this.basePath}/empirehandler/remove/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Birodalom lista lekérdezése.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEmpires(observe?: 'body', reportProgress?: boolean): Observable<Array<Empire>>;
    public getAllEmpires(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Empire>>>;
    public getAllEmpires(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Empire>>>;
    public getAllEmpires(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Empire>>('get',`${this.basePath}/empirehandler/getallempires`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Birodalom lista lekérdezése.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllMyEmpires(observe?: 'body', reportProgress?: boolean): Observable<Array<Empire>>;
    public getAllMyEmpires(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Empire>>>;
    public getAllMyEmpires(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Empire>>>;
    public getAllMyEmpires(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Empire>>('get',`${this.basePath}/empirehandler/getallmyempires`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Egy Birodalom lekérdezése.
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEmpireById(id: number, observe?: 'body', reportProgress?: boolean): Observable<Empire>;
    public getEmpireById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empire>>;
    public getEmpireById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empire>>;
    public getEmpireById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEmpireById.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Empire>('get',`${this.basePath}/empirehandler/byid/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Egy Birodalom lekérdezése.
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEmpireByName(name: string, observe?: 'body', reportProgress?: boolean): Observable<Empire>;
    public getEmpireByName(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empire>>;
    public getEmpireByName(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empire>>;
    public getEmpireByName(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getEmpireByName.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Empire>('get',`${this.basePath}/empirehandler/byname/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Egy Birodalom védelmének lekérdezése
     * @param id 
     * @param starttime 
     * @param stoptime 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSecurityGuard(id: number, starttime: Date, stoptime: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<SecurityGuard>>;
    public getSecurityGuard(id: number, starttime: Date, stoptime: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SecurityGuard>>>;
    public getSecurityGuard(id: number, starttime: Date, stoptime: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SecurityGuard>>>;
    public getSecurityGuard(id: number, starttime: Date, stoptime: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSecurityGuard.');
        }

        if (starttime === null || starttime === undefined) {
            throw new Error('Required parameter starttime was null or undefined when calling getSecurityGuard.');
        }

        if (stoptime === null || stoptime === undefined) {
            throw new Error('Required parameter stoptime was null or undefined when calling getSecurityGuard.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (starttime !== undefined && starttime !== null) {
            queryParameters = queryParameters.set('starttime', <any>starttime.toISOString());
        }
        if (stoptime !== undefined && stoptime !== null) {
            queryParameters = queryParameters.set('stoptime', <any>stoptime.toISOString());
        }

        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SecurityGuard>>('get',`${this.basePath}/empirehandler/security`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Egy Birodalom védelmének megszervezése
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSecurityGuard(body?: SecurityGuard, observe?: 'body', reportProgress?: boolean): Observable<Empire>;
    public setSecurityGuard(body?: SecurityGuard, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empire>>;
    public setSecurityGuard(body?: SecurityGuard, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empire>>;
    public setSecurityGuard(body?: SecurityGuard, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (jwt-token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Empire>('post',`${this.basePath}/empirehandler/security`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
